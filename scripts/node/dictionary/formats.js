const fs = require('fs');
const path = require('path');
const { toHsla } = require('./util/color');
const { DICTIONARY_ROOT } = require('../constants');

const lg = (msg) => {
  console.log(JSON.stringify(msg, null, 2));
};

/**
 * @param {Array} props list of dictionary props
 * @param {String} cat category
 * @returns {Array}
 */
const filterByCategory = (props, cat) =>
  props.filter((p) => p.attributes.category === `${cat}`);

/**
 * @returns {String} generated comment with date
 */
const jsComment = () =>
  [
    '/**',
    '* DO NOT EDIT',
    `* Generated by fds-dictionary on ${new Date()}`,
    '* github.com/cbinsights/form-design-system/',
    '*/\n\n',
  ].join('\n');

/**
 * @param {Array} dictionary style-dictionary dictionary
 * @returns {String} js file
 */
const formatJSCustomProperties = (dictionary) =>
  [
    `${jsComment()}`,
    'module.exports = {',
    ...dictionary.allProperties.map((prop) => `  "--${prop.name}": "${prop.value}",`),
    '};',
  ].join('\n');

/**
 * @param {Array} dictionary style-dicitonary dictionary
 * @return {String} js file with commonJS exports
 */
const formatCommonJs = (dictionary) =>
  jsComment() +
  dictionary.allProperties
    .map((prop) => `exports.${prop.name} = "${prop.value}";`)
    .join('\n');

/**
 * @param {Array} dictionary style-dicitonary dictionary
 * @return {String} js file that exports objects by category
 */
const formatJsManifest = (dictionary) => {
  // properties from color category get more detailed information
  const colors = filterByCategory(dictionary.allProperties, 'color').map((p) => {
    const { name, hex, rgb, hsl, varNames } = p.attributes;
    return {
      name,
      varNames,
      values: {
        hex,
        calculated: p.value,
        rgba: `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${rgb.a})`,
        hsla: toHsla(hsl),
      },
    };
  });

  // all other properties can just map to a simple varName/value/category arr
  const otherProperties = dictionary.allProperties
    .filter((p) => p.attributes.category !== 'color')
    .map((p) => {
      const { varNames, category } = p.attributes;
      return {
        varNames,
        value: p.value,
        attributes: { category },
      };
    });

  const result = {
    colors,
    layouts: filterByCategory(otherProperties, 'layout'),
    fonts: filterByCategory(otherProperties, 'font'),
    borders: filterByCategory(otherProperties, 'border'),
    motions: filterByCategory(otherProperties, 'motion'),
    viewports: filterByCategory(otherProperties, 'customMedia'),
  };

  return `module.exports = ${JSON.stringify(result, null, 2)}`;
};

/**
 * @param {Object} filteredDictionary dictionary category-filtered by config
 * @return {String} js file for colors in the CBI React Native app
 */
const formatReactNativeColors = (filteredDictionary) =>
  [
    `${jsComment()}`,
    'module.exports = {',
    ...filteredDictionary.allProperties.map((prop) => `  ${prop.name}: '${prop.value}',`),
    '};',
  ].join('\n');

/**
 * @param {Object} filteredDictionary dictionary category-filtered by config
 * @return {String} css file with "custom media" declarations (uses PostCSS to polyfill)
 */
const formatCssCustomMedia = (filteredDictionary) =>
  [
    `${jsComment()}`,
    `/**
* Usage (relies on postcss-preset-env Stage 1 polyfills):
*
* @media (--viewport-s) {
*   ...styles that target small viewports AND larger...
* }
*/`,
    ...filteredDictionary.allProperties.map(
      (prop) => `@custom-media --viewport-${prop.name} ${prop.value};`
    ),
  ].join('\n');

/**
 * @param {Object} filteredDictionary dictionary category-filtered by config
 * @return {String} css file with custom properties defining RGB components for each color
 */
const formatRgbComponents = (filteredDictionary) =>
  [
    `${jsComment()}`,
    `/**
* Use these RGB values to compose 'rgba()' colors with a custom alpha channel.
*
* color: rgba( var(--rgb-purple), 0.38);
*/`,
    ':root {',
    ...filteredDictionary.allProperties.map(
      (prop) => `  --rgb-${prop.name}: ${prop.value};`
    ),
    '}',
  ].join('\n');

// Custom formats
module.exports = [
  {
    name: 'js/customProperties',
    formatter: formatJSCustomProperties,
  },
  {
    name: 'javascript/commonJs',
    formatter: formatCommonJs,
  },
  {
    name: 'javascript/manifest',
    formatter: formatJsManifest,
  },
  {
    name: 'javascript/reactNativeColors',
    formatter: formatReactNativeColors,
  },
  {
    name: 'css/customMedia',
    formatter: formatCssCustomMedia,
  },
  {
    name: 'css/rgbComponents',
    formatter: formatRgbComponents,
  },
];

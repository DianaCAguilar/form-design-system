import { Meta, Source, Story } from "@storybook/addon-docs/blocks";
import ColorSwatch, { ColorSwatchWrapper } from "components/util/ColorSwatch";
import { DictionaryTableLayout, TableLayout } from "components/util/Table"
import { mostReadable } from 'tinycolor2';

export const mostReadableConfig = (hexName) =>
  mostReadable(hexName, '#333', { includeFallbackColors: true, level: 'AAA' });

<Meta title="Design Tokens/Dictionary" />

# Dictionary

Using JS Vars: 
`import FDS from '@cbinsights/fds/lib/dictionary/js/styleConstants'`
`<CheckIcon color={FDS.COLOR_MINT} />`

Using CSS Vars:
`.foo { color: var(--color-mint) }`

## Colors

<Story name="Colors">
  <ColorSwatchWrapper>
    {{#each this.color}}
      <ColorSwatch hex="{{this.values.hex}}" cssVar="{{this.varNames.css}}" jsVar="{{this.varNames.js}}" />
    {{/each}}
  </ColorSwatchWrapper>
</Story>

## Layout

<Story name="Layout">
  <DictionaryTableLayout
    data={[
      {{#each this.layout}}
        {
          cssVar: '{{ this.varNames.css }}',
          jsVar: '{{ this.varNames.js }}',
          value: "{{{ this.value }}}",
        },
      {{/each}}
    ]} 
  />
</Story>


## Font


<Story name="Font">
  <TableLayout
    shrinkLastColumn
    headers={['CSS Var', 'JS Var', 'Value']}
    rows={[
      {{#each this.font}}
        ['{{ this.varNames.css }}', '{{ this.varNames.js }}', "{{{ this.value }}}"],
      {{/each}}
    ].map(row => {
      const generateFontValueCell = () => {
        if (row[2].startsWith('rgba')){
          return {
            style: { padding: 0, color: mostReadableConfig(row[2]), height: "1px" }, 
            copyValue: row[2], 
            className: "transparentpattern", 
            children: <div style=\{{ height: "100%", padding: "16px", cursor: "pointer", backgroundColor: row[2] }}>{row[2]}</div> 
          }
        } else if (row[2].startsWith('#')){
          return {
            style: { padding: 0, color: mostReadableConfig(row[2]), height: "1px" }, 
            copyValue: row[2], 
            children: <div style=\{{ height: "100%", padding: "16px", cursor: "pointer", backgroundColor: row[2] }}>{row[2]}</div> 
          }
        } else if (row[1].startsWith('FONT_FAMILY')){
          return {
            children: <div style=\{{ fontFamily: row[2] }}>{row[2]}</div> 
          }
        } else if (row[1].startsWith('FONT_SIZE')){
          return {
            children: <div style=\{{ fontSize: row[2] }}>{row[2]}</div> 
          }
        } else if (row[1].startsWith('FONT_WEIGHT')){
          return {
            children: <div style=\{{ fontWeight: row[2] }}>{row[2]}</div> 
          }
        } else {
          return row[2]
        }
      }
      return [
        `\`${row[0]}\``,
        `\`${row[1]}\``,
        generateFontValueCell(),
      ]
    })} 
  />
</Story>

## Border

<Story name="Border">
  <DictionaryTableLayout
    data={[
      {{#each this.border}}
        {
          cssVar: '{{ this.varNames.css }}',
          jsVar: '{{ this.varNames.js }}',
          value: "{{{ this.value }}}",
        },
      {{/each}}
    ]} 
  />
</Story>

## Motion

<Story name="Motion">
  <DictionaryTableLayout
    data={[
      {{#each this.motion}}
        {
          cssVar: '{{ this.varNames.css }}',
          jsVar: '{{ this.varNames.js }}',
          value: "{{{ this.value }}}",
        },
      {{/each}}
    ]} 
  />
</Story>

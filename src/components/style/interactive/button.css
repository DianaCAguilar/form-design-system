/* stylelint-disable selector-max-combinators */
/* stylelint-disable selector-max-compound-selectors */

.fdsButton {
  border: 0 none;
  letter-spacing: 1px;
  font-weight: var(--font-weight-medium);
  font-size: var(--font-size-default);
  position: relative;
  line-height: normal;
  user-select: none;
  /* We do this to make sure buttons with borders and without are the same dimensions */
  border: 1px solid transparent;
  background-color: transparent;
  min-height: auto;
  box-sizing: border-box;
}

/* Button padding */
/* we remove 1px off each side as there's a border we need to compensate for */
/* we apply vertical padding on the label only, so that the bigger icon
    doesn't change the button dimensions */
.fdsButton--m { padding: 0 15px; }

.fdsButton--m .fdsButton-label { padding: 7px 0; }

.fdsButton--s { padding: 0 6px; }

.fdsButton--s .fdsButton-label { padding: 3px 0; }

.fdsButton--isFullWidth {
  width: 100%;
}

.fdsButton--loading,
.fdsButton--disabled {
  opacity: var(--button-opacity);
  pointer-events: none;
}

/*
  Spinner technique is from the following:
  https://stephanwagner.me/only-css-loading-spinner
  https://codepen.io/stuartjnelson/pen/zjveOO
*/
@keyframes spinner {
  0% {
    transform: translate3d(-50%, -50%, 0) rotate(0deg);
  }

  100% {
    transform: translate3d(-50%, -50%, 0) rotate(360deg);
  }
}

.fdsButton--loading::before {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  border: 2px solid var(--color-white);
  border-top-color: transparent;
  animation: spinner 600ms linear infinite;
  transform: translate3d(-50%, -50%, 0);
  will-change: transform;
}

.fdsButton--hidden {
  visibility: hidden;
}

.fdsButton--blue {
  color: var(--color-white);
  background-color: var(--color-blue);
}

.fdsButton--blue.fdsButton--isActive {
  background-color: #1f78a5;
}

.fdsButton--blue:hover {
  background-color: #1472a1;
}

.fdsButton--blue:active {
  background-color: #5297b9;
}

.fdsButton--blue.fdsButton--isDestructive {
  background-color: var(--color-red);
}

/* stylelint-disable-next-line selector-max-class  */
.fdsButton--blue.fdsButton--isDestructive.fdsButton--isActive {
  background-color: #eb636c;
}

.fdsButton--blue.fdsButton--isDestructive:hover {
  background-color: #e7424d;
}

.fdsButton--blue.fdsButton--isDestructive:active {
  background-color: #ed737c;
}

.fdsButton--outlined,
.fdsButton--ghost {
  color: var(--color--charcoal);
}

.fdsButton--outlined {
  border: 1px solid #c4c4c4;
  background-color: var(--color-white);
}

.fdsButton--outlined.fdsButton--isActive {
  background-color: #e8e8e8;
}

.fdsButton--outlined:hover {
  background-color: #f0f0f0;
}

.fdsButton--outlined:active {
  background-color: #d1d1d1;
}

.fdsButton--ghost.fdsButton--isActive {
  background-color: rgba(64, 64, 64, 0.12);
}

.fdsButton--ghost:hover {
  background-color: rgba(64, 64, 64, 0.08);
}

.fdsButton--ghost:active {
  background-color: rgba(64, 64, 64, 0.24);
}

/* stylelint-disable-next-line selector-max-class  */
.fdsButton--outlined.fdsButton--isDestructive.fdsButton--isActive {
  background-color: #fbdee0;
}

.fdsButton--outlined.fdsButton--isDestructive:hover {
  background-color: #fdeff0;
}

.fdsButton--outlined.fdsButton--isDestructive:active {
  background-color: #f9ced1;
}

/* stylelint-disable-next-line selector-max-class  */
.fdsButton--ghost.fdsButton--isDestructive.fdsButton--isActive {
  background-color: rgba(229, 50, 62, 0.12);
}

.fdsButton--ghost.fdsButton--isDestructive:hover {
  background-color: rgba(229, 50, 62, 0.08);
}

.fdsButton--ghost.fdsButton--isDestructive:active {
  background-color: rgba(229, 50, 62, 0.24);
}

.fdsButton--loading:matches(.fdsButton--ghost, .fdsButton--outlined)::before {
  border: 2px solid #5DABCB;
  border-top-color: transparent;
}

.fdsButton--loading:matches(.fdsButton--outlined, .fdsButton--ghost) {
  opacity: 1;
}

.inverted .fdsButton--outlined {
  border-color: var(--color-white);
}

.inverted .fdsButton--ghost,
.inverted .fdsButton--outlined {
  color: var(--color-white);
  background: transparent;
}

/* stylelint-disable-next-line selector-max-class  */
.inverted .fdsButton--ghost.fdsButton--isActive,
.inverted .fdsButton--outlined.fdsButton--isActive {
  background-color: rgba(255, 255, 255, 0.16);
}


.inverted .fdsButton--ghost:hover,
.inverted .fdsButton--outlined:hover {
  background-color: rgba(255, 255, 255, 0.08);
}

/* stylelint-disable-next-line selector-max-class  */
.inverted .fdsButton--ghost:active,
.inverted .fdsButton--outlined:active {
  background-color: rgba(255, 255, 255, 0.32);
}

/* stylelint-disable-next-line selector-max-class */
.inverted .fdsButton--ghost.fdsButton--loading::before,
.inverted .fdsButton--outlined.fdsButton--loading::before {
  border: 2px solid var(--color-white);
  border-top-color: transparent;
}

.fdsButton--outlined.fdsButton--isDestructive {
  border-color: var(--color-red);
}

.fdsButton--isDestructive:matches(.fdsButton--outlined, .fdsButton--ghost) {
  color: var(--color-red);
}

/* There's a very very unique design requirement here that requires
   the following override. We only want the following design when all 3
   of these cases are true */
/* stylelint-disable-next-line selector-max-class  */
.fdsButton--ghost.fdsButton--loading.fdsButton--isDestructive {
  border-color: var(--color-red);
}

.fdsButton--isDestructive:matches(.fdsButton--outlined, .fdsButton--ghost)::before {
  border: 2px solid var(--color-red);
  border-top-color: transparent;
}

.fdsButton--m .fdsButton-icon--left {
  margin-right: var(--space-half);
}

.fdsButton--m .fdsButton-icon--right {
  margin-left: var(--space-half);
}

.fdsButton--s .fdsButton-icon--left {
  margin-right: 6px;
}

.fdsButton--s .fdsButton-icon--right {
  margin-left: 6px;
}

.fdsButton-icon--left {
  order: -1;
}
